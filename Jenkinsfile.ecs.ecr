pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="2222222222222"
        AWS_DEFAULT_REGION="ap-south-1"
        IMAGE_TAG="v1"

        IMAGE_REPO_FRONTEND="qa-frontend"
        REPO_FRONTEND_URI = "222222222222".dkr.ecr.ap-south-1.amazonaws.com/qa-frontend"

        IMAGE_REPO_BACKEND="qa-backend"
        REPO_BACKEND_URI = "2222222222222.dkr.ecr.ap-south-1.amazonaws.com/qa-backend"
   }
    stages {
        stage('Logging into AWS ECR') {
            steps {
                script {
                sh """aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                }
              }
            }
    // Building Docker images Frontend
    stage('Building Frontend image') {
      steps{
        script {
          sh """docker build -t ${IMAGE_REPO_FRONTEND}:${IMAGE_TAG} -f frontend.dockerfile . """
        }
      }
    }
  // Building Docker images Backend
    stage('Building Backend image') {
      steps{
        script {
          // dockerImage2 = docker.build "${IMAGE_REPO_BACKEND}:${IMAGE_TAG}"- for Dockerfile
          sh """DOCKER_BUILDKIT=1"""
          sh """DOCKER_BUILDKIT=1 docker build -t ${IMAGE_REPO_BACKEND}:${IMAGE_TAG} -f backend.dockerfile . """
        }
      }
    }
   // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
        steps{ 
            script {
          // frontend push
                sh """docker tag ${IMAGE_REPO_FRONTEND}:${IMAGE_TAG} ${REPO_FRONTEND_URI}:$IMAGE_TAG"""
                sh """docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_FRONTEND}:${IMAGE_TAG}"""
          // backend push
                sh """docker tag ${IMAGE_REPO_BACKEND}:${IMAGE_TAG} ${REPO_BACKEND_URI}:$IMAGE_TAG"""
                sh """docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_BACKEND}:${IMAGE_TAG}"""
            }
          }
        }
    stage('ECS Restartt') {
        steps{
            script{
                sh """aws ecs update-service --cluster Cluster_name --service Service-name --force-new-deployment --region ap-south-1"""
                }
        
            }
        }
    }
}
